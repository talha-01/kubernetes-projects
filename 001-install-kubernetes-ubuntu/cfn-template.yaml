AWSTemplateFormatVersion: 2010-09-09
Mappings:
  Region:
    us-east-1:
      ubuntuAMI: ami-06b263d6ceff0b3dd
    us-west-2:
      ubuntuAMI: ami-0ba60995c1589da9d
Parameters:
  keyPair:
    Description: Please select the pem key to ssh into the nodes.
    Type: 'AWS::EC2::KeyPair::KeyName'
  numberWorker:
    Description: Please set the number of worker instances.
    Type: Number
    Default: 2
  instanceType:
    Description: Please select the instance type.
    Type: String
    Default: t2.micro
    AllowedValues:
      - "t2.micro"
      - "t2.medium"
Resources:
  MasterSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Kubernetes master security group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp 
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp 
          ToPort: 80
        - IpProtocol: tcp
          FromPort: 6443
          ToPort: 6443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2379
          ToPort: 2380
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 10250
          ToPort: 10250
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 10251
          ToPort: 10251
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 10252
          ToPort: 10252
          CidrIp: 0.0.0.0/0
  WorkerSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Kubernetes worker security group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp 
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp 
          ToPort: 80
        - IpProtocol: tcp
          FromPort: 30000
          ToPort: 32767
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 10250
          ToPort: 10250
          CidrIp: 0.0.0.0/0
  KMaster:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [Region, !Ref 'AWS::Region', ubuntuAMI]
      InstanceType: !Ref instanceType
      AvailabilityZone: !Join ['', [!Ref 'AWS::Region', 'b']]
      KeyName: !Ref keyPair
      SecurityGroups:
        - !Ref MasterSG
      Tags:
        - Key: Name
          Value: KMaster
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          apt-get update -y
          apt-get update && apt-get install -y apt-transport-https curl
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
          deb https://apt.kubernetes.io/ kubernetes-xenial main
          EOF
          apt-get update -y
          apt-get install -y kubelet kubeadm kubectl docker.io
          apt-mark hold kubelet kubeadm kubectl docker.io
          hostnamectl set-hostname master
          usermod -aG docker ubuntu
          systemctl start docker.service
  KWorker:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: String
      DesiredCapacity: !Ref numberWorker
      LaunchConfigurationName: !Ref workerConfiguration
      MaxSize: !Ref numberWorker #required
      MinSize: !Ref numberWorker #required
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: KWorker
      AvailabilityZones:
        - !Join ['', [!Ref 'AWS::Region', 'b']]
  workerConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      ImageId: !FindInMap [Region, !Ref 'AWS::Region', ubuntuAMI]
      InstanceType: !Ref instanceType
      KeyName: !Ref keyPair
      LaunchConfigurationName: WorkerConf
      SecurityGroups:
        - !Ref WorkerSG
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          apt-get update -y
          apt-get update && apt-get install -y apt-transport-https curl
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
          deb https://apt.kubernetes.io/ kubernetes-xenial main
          EOF
          apt-get update -y
          apt-get install -y kubelet kubeadm kubectl docker.io
          apt-mark hold kubelet kubeadm kubectl docker.io
          hostnamectl set-hostname worker
          usermod -aG docker ubuntu
          systemctl start docker.service        

